/*
 * Created by Voravut Nateluercha. aka fieldfirst
 * This ANN engine take inspiration from MemAid by David Calinski.
 * The source code should be included with this project. Otherwise, please visit sites below
 *
 * https://memaid.sourceforge.net
 * http://sf.net/projects/memaid/
 *
 * Hard coded cases used for initial weights training:
 *
 * private val hardCodedCases: List<List<Double>> = listOf(
        listOf(0.038273, 0.044194, 0.171875, 1.000000, 0.049411),
        listOf(0.255792, 0.255792, 0.148438, 0.800000, 0.270633),
        listOf(0.038273, 0.038273, 0.148438, 0.800000, 0.044194),
        listOf(0.125000, 0.125000, 0.140625, 1.000000, 0.134411),
        listOf(0.054127, 0.054127, 0.140625, 0.800000, 0.058463),
        listOf(0.031250, 0.031250, 0.140625, 0.600000, 0.031250),
        listOf(0.143205, 0.143205, 0.140625, 0.200000, 0.022097),
        listOf(0.141490, 0.141490, 0.132812, 0.800000, 0.146575),
        listOf(0.062500, 0.062500, 0.132812, 0.600000, 0.044194),
        listOf(0.116927, 0.116927, 0.125000, 0.800000, 0.121031),
        listOf(0.044194, 0.044194, 0.125000, 0.400000, 0.022097),
        listOf(0.022097, 0.000000, 0.117188, 0.800000, 0.022097),
        listOf(0.196403, 0.246063, 0.117188, 0.200000, 0.031250),
        listOf(0.163876, 0.163876, 0.109375, 0.800000, 0.165359),
        listOf(0.066291, 0.066291, 0.109375, 0.800000, 0.079672),
        listOf(0.112673, 0.114820, 0.109375, 0.200000, 0.022097),
        listOf(0.250975, 0.250975, 0.101562, 0.800000, 0.296464),
        listOf(0.178152, 0.178152, 0.101562, 0.800000, 0.197642),
        listOf(0.076547, 0.076547, 0.101562, 0.800000, 0.079672),
        listOf(0.058463, 0.058463, 0.101562, 0.800000, 0.073288),
        listOf(0.038273, 0.022097, 0.101562, 0.800000, 0.038273),
        listOf(0.022097, 0.022097, 0.101562, 0.800000, 0.038273),
        listOf(0.082680, 0.082680, 0.078125, 1.000000, 0.110485),
        listOf(0.350780, 0.350780, 0.078125, 0.800000, 0.512062),
        listOf(0.096319, 0.096319, 0.078125, 0.800000, 0.128847),
        listOf(0.069877, 0.069877, 0.078125, 0.800000, 0.082680),
        listOf(0.062500, 0.062500, 0.078125, 0.800000, 0.073288),
        listOf(0.049411, 0.049411, 0.078125, 0.800000, 0.066291),
        listOf(0.038273, 0.000000, 0.078125, 0.800000, 0.038273),
        listOf(0.460871, 0.460871, 0.078125, 0.600000, 0.397133),
        listOf(0.141490, 0.141490, 0.078125, 0.600000, 0.139754),
        listOf(0.101262, 0.103645, 0.078125, 0.600000, 0.093750),
        listOf(0.062500, 0.062500, 0.078125, 0.600000, 0.062500),
        listOf(0.022097, 0.031250, 0.078125, 0.600000, 0.022097),
        listOf(0.022097, 0.022097, 0.078125, 0.400000, 0.022097),
        listOf(0.031250, 0.038273, 0.078125, 0.000000, 0.022097),
        listOf(0.243068, 0.243068, 0.070312, 1.000000, 0.308569),
        listOf(0.066291, 0.066291, 0.070312, 1.000000, 0.121031),
        listOf(0.260521, 0.260521, 0.070312, 0.800000, 0.366439),
        listOf(0.121031, 0.101262, 0.070312, 0.800000, 0.132583),
        listOf(0.082680, 0.082680, 0.070312, 0.800000, 0.091109),
        listOf(0.066291, 0.096319, 0.070312, 0.800000, 0.116927),
        listOf(0.058463, 0.000000, 0.070312, 0.800000, 0.058463),
        listOf(0.049411, 0.000000, 0.070312, 0.800000, 0.049411),
        listOf(0.044194, 0.044194, 0.070312, 0.800000, 0.054127),
        listOf(0.038273, 0.038273, 0.070312, 0.800000, 0.058463),
        listOf(0.031250, 0.000000, 0.070312, 0.800000, 0.031250),
        listOf(0.022097, 0.031250, 0.070312, 0.800000, 0.062500),
        listOf(0.460871, 0.511107, 0.070312, 0.600000, 0.421006),
        listOf(0.098821, 0.098821, 0.070312, 0.600000, 0.098821),
        listOf(0.082680, 0.085582, 0.070312, 0.600000, 0.082680),
        listOf(0.073288, 0.073288, 0.070312, 0.600000, 0.058463),
        listOf(0.066291, 0.066291, 0.070312, 0.600000, 0.062500),
        listOf(0.044194, 0.044194, 0.070312, 0.600000, 0.031250),
        listOf(0.031250, 0.038273, 0.070312, 0.600000, 0.031250),
        listOf(0.022097, 0.000000, 0.070312, 0.600000, 0.022097),
        listOf(0.069877, 0.069877, 0.070312, 0.400000, 0.031250),
        listOf(0.062500, 0.062500, 0.070312, 0.400000, 0.031250),
        listOf(0.031250, 0.031250, 0.070312, 0.400000, 0.022097),
        listOf(0.038273, 0.044194, 0.070312, 0.000000, 0.000000),
        listOf(0.031250, 0.031250, 0.070312, 0.000000, 0.000000),
        listOf(0.022097, 0.031250, 0.070312, 0.000000, 0.000000),
        listOf(0.198874, 0.198874, 0.062500, 1.000000, 0.276876),
        listOf(0.069877, 0.069877, 0.062500, 1.000000, 0.125000),
        listOf(0.282981, 0.282981, 0.062500, 0.800000, 0.409840),
        listOf(0.149870, 0.149870, 0.062500, 0.800000, 0.200098),
        listOf(0.103645, 0.103645, 0.062500, 0.800000, 0.143205),
        listOf(0.062500, 0.000000, 0.062500, 0.800000, 0.062500),
        listOf(0.058463, 0.058463, 0.062500, 0.800000, 0.096319),
        listOf(0.054127, 0.000000, 0.062500, 0.800000, 0.054127),
        listOf(0.038273, 0.000000, 0.062500, 0.800000, 0.038273),
        listOf(0.031250, 0.038273, 0.062500, 0.800000, 0.054127),
        listOf(0.022097, 0.022097, 0.062500, 0.800000, 0.044194),
        listOf(0.069877, 0.069877, 0.062500, 0.600000, 0.073288),
        listOf(0.069877, 0.098821, 0.062500, 0.600000, 0.091109),
        listOf(0.058463, 0.058463, 0.062500, 0.600000, 0.062500),
        listOf(0.038273, 0.038273, 0.062500, 0.600000, 0.038273),
        listOf(0.031250, 0.038273, 0.062500, 0.600000, 0.044194),
        listOf(0.022097, 0.000000, 0.062500, 0.600000, 0.022097),
        listOf(0.088388, 0.088388, 0.062500, 0.400000, 0.038273),
        listOf(0.066291, 0.073288, 0.062500, 0.400000, 0.031250),
        listOf(0.038273, 0.038273, 0.062500, 0.400000, 0.022097),
        listOf(0.022097, 0.022097, 0.062500, 0.200000, 0.022097),
        listOf(0.038273, 0.038273, 0.062500, 0.000000, 0.000000),
        listOf(0.227503, 0.227503, 0.054688, 1.000000, 0.374348),
        listOf(0.066291, 0.066291, 0.054688, 1.000000, 0.108253),
        listOf(0.337297, 0.337297, 0.054688, 0.800000, 0.547098),
        listOf(0.091109, 0.091109, 0.054688, 0.800000, 0.121031),
        listOf(0.079672, 0.079672, 0.054688, 0.800000, 0.134411),
        listOf(0.073288, 0.073288, 0.054688, 0.800000, 0.105974),
        listOf(0.066291, 0.000000, 0.054688, 0.800000, 0.066291),
        listOf(0.062500, 0.000000, 0.054688, 0.800000, 0.062500),
        listOf(0.058463, 0.058463, 0.054688, 0.800000, 0.091109),
        listOf(0.038273, 0.038273, 0.054688, 0.800000, 0.058463),
        listOf(0.031250, 0.031250, 0.054688, 0.800000, 0.054127),
        listOf(0.022097, 0.022097, 0.054688, 0.800000, 0.038273),
        listOf(0.171163, 0.171163, 0.054688, 0.600000, 0.182217),
        listOf(0.105974, 0.105974, 0.054688, 0.600000, 0.096319),
        listOf(0.096319, 0.096319, 0.054688, 0.600000, 0.091109),
        listOf(0.069877, 0.069877, 0.054688, 0.600000, 0.069877),
        listOf(0.058463, 0.058463, 0.054688, 0.600000, 0.058463),
        listOf(0.038273, 0.038273, 0.054688, 0.600000, 0.031250),
        listOf(0.031250, 0.038273, 0.054688, 0.600000, 0.038273),
        listOf(0.022097, 0.000000, 0.054688, 0.600000, 0.022097),
        listOf(0.220971, 0.220971, 0.054688, 0.400000, 0.076547),
        listOf(0.073288, 0.073288, 0.054688, 0.400000, 0.031250),
        listOf(0.058463, 0.058463, 0.054688, 0.400000, 0.022097),
        listOf(0.038273, 0.038273, 0.054688, 0.000000, 0.000000),
        listOf(0.443045, 0.443045, 0.046875, 1.000000, 0.671330),
        listOf(0.302980, 0.302980, 0.046875, 1.000000, 0.450694),
        listOf(0.085582, 0.085582, 0.046875, 1.000000, 0.156250),
        listOf(0.069877, 0.069877, 0.046875, 1.000000, 0.132583),
        listOf(0.038273, 0.000000, 0.046875, 1.000000, 0.044194),
        listOf(0.443045, 0.443045, 0.046875, 0.800000, 0.641196),
        listOf(0.098821, 0.098821, 0.046875, 0.800000, 0.154680),
        listOf(0.085582, 0.085582, 0.046875, 0.800000, 0.141490),
        listOf(0.076547, 0.076547, 0.046875, 0.800000, 0.123031),
        listOf(0.069877, 0.062500, 0.046875, 0.800000, 0.105974),
        listOf(0.069877, 0.069877, 0.046875, 0.800000, 0.108253),
        listOf(0.066291, 0.066291, 0.046875, 0.800000, 0.110485),
        listOf(0.062500, 0.000000, 0.046875, 0.800000, 0.062500),
        listOf(0.058463, 0.062500, 0.046875, 0.800000, 0.085582),
        listOf(0.038273, 0.038273, 0.046875, 0.800000, 0.066291),
        listOf(0.031250, 0.038273, 0.046875, 0.800000, 0.062500),
        listOf(0.031250, 0.031250, 0.046875, 0.800000, 0.058463),
        listOf(0.022097, 0.000000, 0.046875, 0.800000, 0.022097),
        listOf(0.022097, 0.022097, 0.046875, 0.800000, 0.049411),
        listOf(0.460871, 0.460871, 0.046875, 0.600000, 0.470310),
        listOf(0.229640, 0.229640, 0.046875, 0.600000, 0.242061),
        listOf(0.160869, 0.160869, 0.046875, 0.600000, 0.173993),
        listOf(0.110485, 0.110485, 0.046875, 0.600000, 0.114820),
        listOf(0.079672, 0.082680, 0.046875, 0.600000, 0.082680),
        listOf(0.066291, 0.066291, 0.046875, 0.600000, 0.069877),
        listOf(0.038273, 0.044194, 0.046875, 0.600000, 0.054127),
        listOf(0.022097, 0.000000, 0.046875, 0.600000, 0.022097),
        listOf(0.054127, 0.054127, 0.046875, 0.400000, 0.031250),
        listOf(0.031250, 0.038273, 0.046875, 0.400000, 0.022097),
        listOf(0.022097, 0.031250, 0.046875, 0.400000, 0.022097),
        listOf(0.208464, 0.209631, 0.046875, 0.200000, 0.022097),
        listOf(0.121031, 0.171163, 0.046875, 0.200000, 0.031250),
        listOf(0.098821, 0.098821, 0.046875, 0.200000, 0.038273),
        listOf(0.054127, 0.054127, 0.046875, 0.200000, 0.022097),
        listOf(0.038273, 0.038273, 0.046875, 0.000000, 0.022097),
        listOf(0.022097, 0.022097, 0.046875, 0.000000, 0.000000),
        listOf(0.392806, 0.444695, 0.039062, 1.000000, 0.625000),
        listOf(0.302980, 0.331456, 0.039062, 1.000000, 0.487139),
        listOf(0.302980, 0.302980, 0.039062, 1.000000, 0.466662),
        listOf(0.215376, 0.215376, 0.039062, 1.000000, 0.319454),
        listOf(0.088388, 0.031250, 0.039062, 1.000000, 0.098821),
        listOf(0.076547, 0.076547, 0.039062, 1.000000, 0.139754),
        listOf(0.062500, 0.062500, 0.039062, 1.000000, 0.121031),
        listOf(0.049411, 0.069877, 0.039062, 1.000000, 0.130728),
        listOf(0.044194, 0.044194, 0.039062, 1.000000, 0.091109),
        listOf(0.022097, 0.022097, 0.039062, 1.000000, 0.073288),
        listOf(0.445792, 0.445792, 0.039062, 0.800000, 0.625781),
        listOf(0.201314, 0.201314, 0.039062, 0.800000, 0.297286),
        listOf(0.116927, 0.116927, 0.039062, 0.800000, 0.208464),
        listOf(0.098821, 0.098821, 0.039062, 0.800000, 0.169731),
        listOf(0.088388, 0.000000, 0.039062, 0.800000, 0.088388),
        listOf(0.079672, 0.079672, 0.039062, 0.800000, 0.126938),
        listOf(0.073288, 0.073288, 0.039062, 0.800000, 0.112673),
        listOf(0.069877, 0.000000, 0.039062, 0.800000, 0.069877),
        listOf(0.069877, 0.069877, 0.039062, 0.800000, 0.123031),
        listOf(0.066291, 0.000000, 0.039062, 0.800000, 0.066291),
        listOf(0.066291, 0.066291, 0.039062, 0.800000, 0.118996),
        listOf(0.062500, 0.000000, 0.039062, 0.800000, 0.062500),
        listOf(0.058463, 0.000000, 0.039062, 0.800000, 0.058463),
        listOf(0.054127, 0.000000, 0.039062, 0.800000, 0.054127),
        listOf(0.049411, 0.049411, 0.039062, 0.800000, 0.096319),
        listOf(0.044194, 0.000000, 0.039062, 0.800000, 0.049411),
        listOf(0.044194, 0.044194, 0.039062, 0.800000, 0.082680),
        listOf(0.031250, 0.031250, 0.039062, 0.800000, 0.062500),
        listOf(0.022097, 0.000000, 0.039062, 0.800000, 0.022097),
        listOf(0.022097, 0.022097, 0.039062, 0.800000, 0.049411),
        listOf(0.244070, 0.244070, 0.039062, 0.600000, 0.294812),
        listOf(0.210793, 0.210793, 0.039062, 0.600000, 0.231756),
        listOf(0.121031, 0.121031, 0.039062, 0.600000, 0.134411),
        listOf(0.096319, 0.096319, 0.039062, 0.600000, 0.101262),
        listOf(0.062500, 0.066291, 0.039062, 0.600000, 0.069877),
        listOf(0.058463, 0.058463, 0.039062, 0.600000, 0.066291),
        listOf(0.044194, 0.044194, 0.039062, 0.600000, 0.054127),
        listOf(0.038273, 0.044194, 0.039062, 0.600000, 0.054127),
        listOf(0.031250, 0.038273, 0.039062, 0.600000, 0.038273),
        listOf(0.217631, 0.217631, 0.039062, 0.400000, 0.088388),
        listOf(0.126938, 0.128847, 0.039062, 0.400000, 0.062500),
        listOf(0.085582, 0.085582, 0.039062, 0.400000, 0.044194),
        listOf(0.082680, 0.082680, 0.039062, 0.400000, 0.044194),
        listOf(0.066291, 0.066291, 0.039062, 0.400000, 0.031250),
        listOf(0.054127, 0.054127, 0.039062, 0.400000, 0.022097),
        listOf(0.022097, 0.022097, 0.039062, 0.400000, 0.022097),
        listOf(0.173993, 0.173993, 0.039062, 0.200000, 0.022097),
        listOf(0.121031, 0.121031, 0.039062, 0.200000, 0.031250),
        listOf(0.058463, 0.058463, 0.039062, 0.200000, 0.031250),
        listOf(0.044194, 0.044194, 0.039062, 0.200000, 0.022097),
        listOf(0.022097, 0.022097, 0.039062, 0.200000, 0.022097),
        listOf(0.069877, 0.069877, 0.039062, 0.000000, 0.022097),
        listOf(0.054127, 0.054127, 0.039062, 0.000000, 0.022097),
        listOf(0.031250, 0.038273, 0.039062, 0.000000, 0.000000),
        listOf(0.022097, 0.031250, 0.039062, 0.000000, 0.000000),
        listOf(0.022097, 0.022097, 0.039062, 0.000000, 0.000000),
        listOf(0.354243, 0.354243, 0.031250, 1.000000, 0.608373),
        listOf(0.222073, 0.222073, 0.031250, 1.000000, 0.366439),
        listOf(0.076547, 0.076547, 0.031250, 1.000000, 0.144900),
        listOf(0.069877, 0.000000, 0.031250, 1.000000, 0.073288),
        listOf(0.049411, 0.096319, 0.031250, 1.000000, 0.153093),
        listOf(0.132583, 0.132583, 0.031250, 0.800000, 0.211948),
        listOf(0.130728, 0.098821, 0.031250, 0.800000, 0.178152),
        listOf(0.114820, 0.114820, 0.031250, 0.800000, 0.200098),
        listOf(0.088388, 0.088388, 0.031250, 0.800000, 0.151490),
        listOf(0.085582, 0.000000, 0.031250, 0.800000, 0.085582),
        listOf(0.079672, 0.079672, 0.031250, 0.800000, 0.148232),
        listOf(0.076547, 0.000000, 0.031250, 0.800000, 0.076547),
        listOf(0.076547, 0.076547, 0.031250, 0.800000, 0.126938),
        listOf(0.069877, 0.000000, 0.031250, 0.800000, 0.069877),
        listOf(0.069877, 0.069877, 0.031250, 0.800000, 0.123031),
        listOf(0.066291, 0.066291, 0.031250, 0.800000, 0.125000),
        listOf(0.062500, 0.000000, 0.031250, 0.800000, 0.076547),
        listOf(0.062500, 0.062500, 0.031250, 0.800000, 0.112673),
        listOf(0.049411, 0.049411, 0.031250, 0.800000, 0.088388),
        listOf(0.038273, 0.000000, 0.031250, 0.800000, 0.038273),
        listOf(0.022097, 0.022097, 0.031250, 0.800000, 0.058463),
        listOf(0.352862, 0.352862, 0.031250, 0.600000, 0.376948),
        listOf(0.183552, 0.183552, 0.031250, 0.600000, 0.200098),
        listOf(0.143205, 0.143205, 0.031250, 0.600000, 0.144900),
        listOf(0.110485, 0.103645, 0.031250, 0.600000, 0.098821),
        listOf(0.103645, 0.103645, 0.031250, 0.600000, 0.103645),
        listOf(0.088388, 0.088388, 0.031250, 0.600000, 0.098821),
        listOf(0.069877, 0.069877, 0.031250, 0.600000, 0.073288),
        listOf(0.066291, 0.062500, 0.031250, 0.600000, 0.079672),
        listOf(0.066291, 0.066291, 0.031250, 0.600000, 0.076547),
        listOf(0.058463, 0.058463, 0.031250, 0.600000, 0.066291),
        listOf(0.054127, 0.054127, 0.031250, 0.600000, 0.062500),
        listOf(0.054127, 0.022097, 0.031250, 0.600000, 0.044194),
        listOf(0.038273, 0.038273, 0.031250, 0.600000, 0.049411),
        listOf(0.031250, 0.038273, 0.031250, 0.600000, 0.044194),
        listOf(0.022097, 0.000000, 0.031250, 0.600000, 0.022097),
        listOf(0.022097, 0.022097, 0.031250, 0.600000, 0.031250),
        listOf(0.230700, 0.230700, 0.031250, 0.400000, 0.123031),
        listOf(0.103645, 0.103645, 0.031250, 0.400000, 0.073288),
        listOf(0.096319, 0.096319, 0.031250, 0.400000, 0.058463),
        listOf(0.085582, 0.085582, 0.031250, 0.400000, 0.058463),
        listOf(0.076547, 0.076547, 0.031250, 0.400000, 0.038273),
        listOf(0.066291, 0.066291, 0.031250, 0.400000, 0.038273),
        listOf(0.058463, 0.076547, 0.031250, 0.400000, 0.031250),
        listOf(0.054127, 0.058463, 0.031250, 0.400000, 0.031250),
        listOf(0.044194, 0.044194, 0.031250, 0.400000, 0.022097),
        listOf(0.038273, 0.049411, 0.031250, 0.400000, 0.022097),
        listOf(0.022097, 0.022097, 0.031250, 0.400000, 0.000000),
        listOf(0.069877, 0.073288, 0.031250, 0.200000, 0.022097),
        listOf(0.066291, 0.069877, 0.031250, 0.200000, 0.022097),
        listOf(0.054127, 0.054127, 0.031250, 0.200000, 0.022097),
        listOf(0.022097, 0.022097, 0.031250, 0.200000, 0.022097),
        listOf(0.054127, 0.054127, 0.031250, 0.000000, 0.000000),
        listOf(0.038273, 0.038273, 0.031250, 0.000000, 0.000000),
        listOf(0.022097, 0.031250, 0.031250, 0.000000, 0.000000),
        listOf(0.022097, 0.022097, 0.031250, 0.000000, 0.000000),
        listOf(0.268823, 0.268823, 0.023438, 1.000000, 0.482608),
        listOf(0.136216, 0.136216, 0.023438, 1.000000, 0.250975),
        listOf(0.125000, 0.125000, 0.023438, 1.000000, 0.236965),
        listOf(0.058463, 0.058463, 0.023438, 1.000000, 0.112673),
        listOf(0.054127, 0.054127, 0.023438, 1.000000, 0.118996),
        listOf(0.049411, 0.049411, 0.023438, 1.000000, 0.108253),
        listOf(0.044194, 0.044194, 0.023438, 1.000000, 0.088388),
        listOf(0.022097, 0.022097, 0.023438, 1.000000, 0.079672),
        listOf(0.255792, 0.255792, 0.023438, 0.800000, 0.499022),
        listOf(0.156250, 0.156250, 0.023438, 0.800000, 0.270633),
        listOf(0.128847, 0.128847, 0.023438, 0.800000, 0.220971),
        listOf(0.096319, 0.096319, 0.023438, 0.800000, 0.183552),
        listOf(0.093750, 0.093750, 0.023438, 0.800000, 0.165359),
        listOf(0.088388, 0.000000, 0.023438, 0.800000, 0.085582),
        listOf(0.079672, 0.079672, 0.023438, 0.800000, 0.151490),
        listOf(0.069877, 0.000000, 0.023438, 0.800000, 0.069877),
        listOf(0.066291, 0.000000, 0.023438, 0.800000, 0.073288),
        listOf(0.058463, 0.000000, 0.023438, 0.800000, 0.062500),
        listOf(0.058463, 0.058463, 0.023438, 0.800000, 0.101262),
        listOf(0.054127, 0.000000, 0.023438, 0.800000, 0.054127),
        listOf(0.049411, 0.049411, 0.023438, 0.800000, 0.096319),
        listOf(0.044194, 0.000000, 0.023438, 0.800000, 0.049411),
        listOf(0.044194, 0.049411, 0.023438, 0.800000, 0.093750),
        listOf(0.038273, 0.044194, 0.023438, 0.800000, 0.073288),
        listOf(0.038273, 0.000000, 0.023438, 0.800000, 0.044194),
        listOf(0.031250, 0.000000, 0.023438, 0.800000, 0.049411),
        listOf(0.031250, 0.038273, 0.023438, 0.800000, 0.058463),
        listOf(0.022097, 0.000000, 0.023438, 0.800000, 0.022097),
        listOf(0.022097, 0.022097, 0.023438, 0.800000, 0.062500),
        listOf(0.176777, 0.176777, 0.023438, 0.600000, 0.213097),
        listOf(0.143205, 0.143205, 0.023438, 0.600000, 0.173993),
        listOf(0.091109, 0.091109, 0.023438, 0.600000, 0.105974),
        listOf(0.066291, 0.066291, 0.023438, 0.600000, 0.076547),
        listOf(0.054127, 0.054127, 0.023438, 0.600000, 0.058463),
        listOf(0.044194, 0.049411, 0.023438, 0.600000, 0.054127),
        listOf(0.044194, 0.069877, 0.023438, 0.600000, 0.066291),
        listOf(0.022097, 0.031250, 0.023438, 0.600000, 0.038273),
        listOf(0.022097, 0.000000, 0.023438, 0.600000, 0.022097),
        listOf(0.022097, 0.022097, 0.023438, 0.600000, 0.031250),
        listOf(0.134411, 0.134411, 0.023438, 0.400000, 0.069877),
        listOf(0.103645, 0.103645, 0.023438, 0.400000, 0.058463),
        listOf(0.069877, 0.069877, 0.023438, 0.400000, 0.038273),
        listOf(0.066291, 0.066291, 0.023438, 0.400000, 0.022097),
        listOf(0.058463, 0.062500, 0.023438, 0.400000, 0.022097),
        listOf(0.054127, 0.054127, 0.023438, 0.400000, 0.031250),
        listOf(0.038273, 0.096319, 0.023438, 0.400000, 0.038273),
        listOf(0.022097, 0.022097, 0.023438, 0.400000, 0.000000),
        listOf(0.204920, 0.204920, 0.023438, 0.200000, 0.049411),
        listOf(0.118996, 0.118996, 0.023438, 0.200000, 0.054127),
        listOf(0.069877, 0.096319, 0.023438, 0.200000, 0.022097),
        listOf(0.049411, 0.049411, 0.023438, 0.200000, 0.022097),
        listOf(0.022097, 0.022097, 0.023438, 0.200000, 0.022097),
        listOf(0.088388, 0.088388, 0.023438, 0.000000, 0.022097),
        listOf(0.062500, 0.062500, 0.023438, 0.000000, 0.000000),
        listOf(0.022097, 0.022097, 0.023438, 0.000000, 0.000000),
        listOf(0.333659, 0.333659, 0.015625, 1.000000, 0.608373),
        listOf(0.121031, 0.121031, 0.015625, 1.000000, 0.250975),
        listOf(0.076547, 0.076547, 0.015625, 1.000000, 0.151490),
        listOf(0.069877, 0.069877, 0.015625, 1.000000, 0.148232),
        listOf(0.058463, 0.058463, 0.015625, 1.000000, 0.132583),
        listOf(0.049411, 0.049411, 0.015625, 1.000000, 0.116927),
        listOf(0.038273, 0.038273, 0.015625, 1.000000, 0.103645),
        listOf(0.022097, 0.000000, 0.015625, 1.000000, 0.031250),
        listOf(0.022097, 0.022097, 0.015625, 1.000000, 0.066291),
        listOf(0.222073, 0.222073, 0.015625, 0.800000, 0.380173),
        listOf(0.128847, 0.128847, 0.015625, 0.800000, 0.243068),
        listOf(0.088388, 0.088388, 0.015625, 0.800000, 0.163876),
        listOf(0.076547, 0.062500, 0.015625, 0.800000, 0.123031),
        listOf(0.069877, 0.069877, 0.015625, 0.800000, 0.136216),
        listOf(0.066291, 0.000000, 0.015625, 0.800000, 0.069877),
        listOf(0.062500, 0.038273, 0.015625, 0.800000, 0.085582),
        listOf(0.058463, 0.000000, 0.015625, 0.800000, 0.062500),
        listOf(0.054127, 0.054127, 0.015625, 0.800000, 0.103645),
        listOf(0.044194, 0.044194, 0.015625, 0.800000, 0.082680),
        listOf(0.038273, 0.038273, 0.015625, 0.800000, 0.073288),
        listOf(0.031250, 0.000000, 0.015625, 0.800000, 0.031250),
        listOf(0.022097, 0.031250, 0.015625, 0.800000, 0.058463),
        listOf(0.222073, 0.222073, 0.015625, 0.600000, 0.272431),
        listOf(0.112673, 0.165359, 0.015625, 0.600000, 0.188798),
        listOf(0.112673, 0.112673, 0.015625, 0.600000, 0.144900),
        listOf(0.088388, 0.088388, 0.015625, 0.600000, 0.110485),
        listOf(0.038273, 0.044194, 0.015625, 0.600000, 0.049411),
        listOf(0.031250, 0.000000, 0.015625, 0.600000, 0.038273),
        listOf(0.022097, 0.022097, 0.015625, 0.600000, 0.038273),
        listOf(0.382733, 0.382733, 0.015625, 0.400000, 0.162380),
        listOf(0.082680, 0.085582, 0.015625, 0.400000, 0.044194),
        listOf(0.044194, 0.049411, 0.015625, 0.400000, 0.031250),
        listOf(0.022097, 0.022097, 0.015625, 0.400000, 0.022097),
        listOf(0.085582, 0.085582, 0.015625, 0.200000, 0.022097),
        listOf(0.069877, 0.069877, 0.015625, 0.200000, 0.031250),
        listOf(0.062500, 0.066291, 0.015625, 0.200000, 0.000000),
        listOf(0.022097, 0.022097, 0.007812, 1.000000, 0.091109),
        listOf(0.091109, 0.091109, 0.007812, 0.800000, 0.173993),
        listOf(0.066291, 0.066291, 0.007812, 0.800000, 0.118996),
        listOf(0.054127, 0.058463, 0.007812, 0.800000, 0.116927),
        listOf(0.038273, 0.000000, 0.007812, 0.800000, 0.054127),
        listOf(0.186193, 0.186193, 0.007812, 0.600000, 0.235932),
        listOf(0.118996, 0.105974, 0.007812, 0.600000, 0.134411),
        listOf(0.076547, 0.076547, 0.007812, 0.600000, 0.091109),
        listOf(0.069877, 0.069877, 0.007812, 0.600000, 0.082680),
        listOf(0.066291, 0.066291, 0.007812, 0.600000, 0.082680),
        listOf(0.058463, 0.038273, 0.000000, 0.800000, 0.098821),
        listOf(0.038273, 0.022097, 0.000000, 0.800000, 0.069877),
        listOf(0.022097, 0.038273, 0.000000, 0.800000, 0.085582),
        listOf(0.066291, 0.069877, 0.000000, 0.600000, 0.091109),
        listOf(0.054127, 0.054127, 0.000000, 0.600000, 0.062500),
        listOf(0.044194, 0.044194, 0.000000, 0.600000, 0.058463),
        listOf(0.022097, 0.022097, 0.000000, 0.600000, 0.044194),
        listOf(0.076547, 0.079672, 0.000000, 0.400000, 0.038273),
        listOf(0.022097, 0.022097, 0.000000, 0.400000, 0.022097),
    )
 */
package com.fieldfirst.mimir.neuralnetwork

import com.fieldfirst.mimir.Database
import kotlin.math.pow
import kotlin.math.roundToInt
import kotlin.math.sqrt

class NeuralNetwork(private val db: Database) {

    companion object {
        const val KEY_LATEST_ROOTED_MEAN_SQUARED_ERROR: String = "latestRootedMeanSquaredError"
        const val KEY_LATEST_LEARNING_RATE: String = "latestLearningRate"
        const val KEY_NUM_OF_USERCASES: String = "numberOfUserCases"
        const val KEY_TOTAL_SESSION_EPOCHS: String = "totalSessionEpochs"
    }

    init {
        initializeWeights(db.retrieveWeights())
        initializeUserCases(db.retrieveUserCases())
    }

    private val maxRepetition: Double = 128.0
    private val maxInterval: Double = 2048.0
    private val maxGrade: Double = 5.0

    private fun normalizeRepetition(repetition: Int): Double = repetition / maxRepetition
    private fun normalizeInterval(day: Int): Double = sqrt(day / maxInterval)
    private fun normalizeGrade(grade: Int): Double = grade / maxGrade

    private fun deNormalizeInterval(day: Double): Int = (day.pow(2) * maxInterval).roundToInt()

    private val userCases: MutableList<UserCase> = mutableListOf()

    private fun initializeUserCases(storedCases: List<UserCase>) {
        for (case in storedCases) {
            if (userCases.contains(case)) {
                val dCase = userCases.single { it == case }
                dCase.predictedInterval = (dCase.predictedInterval + case.predictedInterval) / 2
            } else
                userCases.add(case)
        }
    }

    private val hardCodedWeights: List<Double> = listOf(
        1.472593865083899, 0.9431839251912288, -0.1021457865291745, -3.796339895638894, 0.18019169803068877,
        -0.16280051256493738, -0.30041228847378115, -0.14658883676846263, -0.3529589935590176, -0.0678350250065675,
        -1.3488387631300833, -0.2436682900318356, -1.3004641880568433, -0.5300676100805057, 2.104691395149232,
        0.5213943142750043, -0.13700941974658917, -0.36882644394767, 0.16570136023791923, -0.43505038137903923,
        0.2628808086895999, 0.09540477251262977, 1.0279165881549424, -0.18614346539767215, 0.19399898460217457,
        0.4997964589962733, -1.070730279551716, -0.40383768410359777, -0.44654680620492154, -0.6010817208221786,
        -0.07750669683955745, -0.6974981190146855, -0.795346204808412, 0.04053164876470116, 1.3960566702875437,
        -0.7773431235872381, -2.7590867687657292, -4.674437253681985, 1.0496167070742775, -1.4440028108676075,
        -0.1851795742091277, -0.7332249692048245, 1.2912935811150803, 0.23940846756529002, -0.02432364498499397,
        0.03370217346873649, 0.4203749782632578, -0.3895789357093515, 1.5259420265291177, 0.7946030889249844,
        -0.3017122421011188, -3.732983784606238, 3.0758408354667517, 1.6826957239815428, -2.474206014943052,
        -1.936714241384285, 0.23795226344625475, -0.03062108641621703, -1.1021462039871643, -0.337418725815192,
        0.3098990290970122, 0.02083666266661431, -0.12525772731334303, -0.04087988172918473, 0.16123454361122777,
        0.3124569778036067, -1.0463190129526845, -0.3690624464345821, -5.941901580409897, -8.532732866234252,
        0.08977877187303597, -0.9875714771603556, -0.14816239175974993, -0.16644704061586754, -0.3180519666024638,
        -0.28774112356182135, -0.9039794847801798, -1.4738962585059003, 1.3951382669768113, 0.05906426533353319,
        -6.068674929768041, 0.2210081059281331, 1.3540159362426956, -2.1041763107337013, -0.08446356329855734,
        -0.7336306238495645, 1.1817103529888733, -0.009181507574949142, -1.2346945111091352, -1.9462022700366286,
        -1.4220439025046439, -0.26719418589152977, -5.679201368996607, 4.069873168966941, 1.1393974682123138,
        0.10554650138874822, 1.0552158969535959, -4.381311327147914, 0.2801511440353582, -1.3982082999885854
    )

    private fun sigmoid(x: Double): Double = 1.0 / (1.0 + Math.E.pow(-x))
    private fun sigmoidDerivative(y: Double): Double = y * (1.0 - y)
    private fun rootedMeanSquaredError(errors: List<Double>): Double = sqrt(errors.sumOf { it.pow(2) } / errors.size)
    private var latestLearningRate: Double = 0.1
    private var latestRMSE: Double = 0.0
    private var totalSessionEpochs: Int = 0

    private class Layer(
        val units: Int
    ) {
        val weights: Array<Array<Double>> = Array(units) { arrayOf() }
        val outputs: Array<Double> = Array(units) { 0.0 }
        val errors: Array<Double> = Array(units) { 0.0 }
    }

    private val network: List<Layer> = listOf(Layer(4), Layer(20), Layer(1))

    private fun initializeWeights(storedWeights: List<Double>? = null) {
        val weights: List<Double> =
            if (storedWeights != null && storedWeights.size == hardCodedWeights.size) storedWeights else hardCodedWeights
        var counter = 0
        for (l in 1 until network.size)
            for (i in 0 until network[l].units) {
                network[l].weights[i] = weights.slice(
                    counter until counter + network[l - 1].units
                ).toTypedArray()

                counter += network[l - 1].units
            }
    }

    private fun retrieveWeights(): List<Double> = network.flatMap { it.weights.flatten() }

    private fun propagation(
        lastPredictedInterval: Double,
        reviewInterval: Double,
        repetition: Double,
        grade: Double
    ): Double {
        network[0].outputs[0] = lastPredictedInterval
        network[0].outputs[1] = reviewInterval
        network[0].outputs[2] = repetition
        network[0].outputs[3] = grade

        for (l in 0 until network.size - 1)
            for (i in 0 until network[l + 1].units) {
                var sum = 0.0

                for (j in 0 until network[l].units)
                    sum += network[l + 1].weights[i][j] * network[l].outputs[j]

                network[l + 1].outputs[i] = sigmoid(sum)
            }
        return network.last().outputs[0]
    }

    fun predictNextInterval(
        predictedInterval: Int,
        reviewInterval: Int,
        repetition: Int,
        grade: Int
    ): Int =
        propagation(
            normalizeInterval(predictedInterval),
            normalizeInterval(reviewInterval),
            normalizeRepetition(repetition),
            normalizeGrade(grade)
        ).let { deNormalizeInterval(it) }


    fun feedBackToNeuralNetwork(
        lastPredictedInterval: Int,
        reviewInterval: Int,
        repetition: Int,
        grade: Int,
        predictedInterval: Int,
        actualInterval: Int,
        actualGrade: Int,
    ) {
        var betterInterval: Int = actualInterval
        val factor: Double = when (actualGrade) {
            0 -> {
                if (actualInterval > predictedInterval)
                    betterInterval = (actualInterval + predictedInterval) / 2
                0.4
            }

            1 -> {
                if (actualInterval > predictedInterval)
                    betterInterval = (actualInterval + predictedInterval) / 2
                0.55
            }

            2 -> {
                if (actualInterval > predictedInterval)
                    betterInterval = (actualInterval + predictedInterval) / 2
                0.7
            }

            3 -> {
                if (actualInterval > predictedInterval)
                    betterInterval = (actualInterval + predictedInterval) / 2
                0.85
            }

            4 -> 1.0

            5 -> {
                if (actualInterval < predictedInterval)
                    betterInterval = (actualInterval + predictedInterval) / 2
                1.2
            }

            else -> 0.0
        }

        betterInterval *= factor.roundToInt()

        UserCase(
            normalizeInterval(lastPredictedInterval),
            normalizeInterval(reviewInterval),
            normalizeRepetition(repetition),
            normalizeGrade(grade)
        ).let {
            it.predictedInterval = normalizeInterval(betterInterval)
            userCases.add(it)
            db.insertUserCase(it)
        }

        onlineTraining()
    }

    private fun backPropagation(expectedInterval: Double): Double {
        val networkOutput = network[2].outputs[0]
        val networkError = networkOutput - expectedInterval
        network[2].errors[0] = sigmoidDerivative(networkOutput) * networkError

        for (l in network.size - 1 downTo 1)
            for (i in 0 until network[l - 1].units) {
                val output = network[l - 1].outputs[i]
                var error = 0.0

                for (j in 0 until network[l].units)
                    error += network[l].weights[j][i] * network[l].errors[j]

                network[l - 1].errors[i] = sigmoidDerivative(output) * error
            }

        return networkError
    }

    private fun simulateNeuralNetwork(
        lastPredictedInterval: Double,
        reviewInterval: Double,
        repetition: Double,
        grade: Double,
        predictedInterval: Double
    ): Double {
        propagation(lastPredictedInterval, reviewInterval, repetition, grade)
        val networkError = backPropagation(predictedInterval)

        for (l in 1 until network.size)
            for (i in 0 until network[l].units)
                for (j in 0 until network[l - 1].units)
                    network[l].weights[i][j] -=
                        network[l].errors[i] * network[l - 1].outputs[j] * latestLearningRate

        return networkError
    }

    private fun onlineTraining(epochFactor: Int = 8, targetRMSE: Double = 0.0125) {
        if (userCases.size == 0) return
        val totalEpochs = epochFactor * userCases.size
        var epochCounter = 1
        do {
            val networkErrors: MutableList<Double> = mutableListOf()

            for (case in userCases)
                simulateNeuralNetwork(
                    case.lastPredictedInterval,
                    case.reviewInterval,
                    case.repetition,
                    case.grade,
                    case.predictedInterval
                ).let { networkError -> networkErrors.add(networkError) }


            latestRMSE = rootedMeanSquaredError(networkErrors)
            latestLearningRate = if (latestRMSE >= 0.02) 0.9 else 0.1
            totalSessionEpochs += 1

            userCases.shuffle()
        } while (epochCounter++ < totalEpochs && latestRMSE > targetRMSE)

        db.saveWeights(retrieveWeights())
    }

    fun currentNeuralNetworkStats(): Map<String, String> =
        mapOf(
            KEY_LATEST_ROOTED_MEAN_SQUARED_ERROR to latestRMSE.toString(),
            KEY_LATEST_LEARNING_RATE to latestLearningRate.toString(),
            KEY_NUM_OF_USERCASES to userCases.size.toString(),
            KEY_TOTAL_SESSION_EPOCHS to totalSessionEpochs.toString()
        )

}
